import {_saveQuestion, _saveQuestionAnswer} from './_data';

describe('_saveQuestion tests', () => {

    // Test that the _saveQuestion function adds the item correctly.
    test('Add new question - expected success', async () => {
        let addData = {
            optionOneText: 'Test option one',
            optionTwoText: 'Test option two',
            author: 'sarahedo'
        };

        let expected = {
            author: 'sarahedo',
            optionOne: {
                votes: [],
                text: 'Test option one',
            },
            optionTwo: {
                votes: [],
                text: 'Test option two',
            },
            id: '',
            timestamp: 0
        };

        let actual = await _saveQuestion(addData);

        // Have to manipulate the expected object to get the id and timestamp from the actual object.
        //   This is because the id and timestamp are generated by the _saveQuestion function and cannot be predicted in advance.
        if (actual.hasOwnProperty('id')) {
            expected.id = actual.id;
        }

        if (actual.hasOwnProperty('timestamp')) {
            expected.timestamp = actual.timestamp;
        }

        expect(actual).toEqual(expected);
    });

    test('Add new question - missing author', async () => {
        let addData = {
            optionOneText: 'Test option one',
            optionTwoText: 'Test option two'
        };

        await expect(_saveQuestion(addData)).rejects.toEqual("Please provide optionOneText, optionTwoText, and author");
    });

    test('Add new question - missing option1', async () => {
        let addData = {
            author: 'sarahedo',
            optionTwoText: 'Test option two',
        };

        await expect(_saveQuestion(addData)).rejects.toEqual("Please provide optionOneText, optionTwoText, and author");
    });
    test('Add new question - missing option2', async () => {
        let addData = {
            optionOneText: 'Test option one',
            author: 'sarahedo'
        };

        await expect(_saveQuestion(addData)).rejects.toEqual("Please provide optionOneText, optionTwoText, and author");
    });

});

describe('_saveQuestionAnswer tests', () => {
    test('Save answer - expected success', async () => {
        let addData = { "authedUser": "sarahedo", "qid":"loxhs1bqm25b708cmbf3g", "answer": "optionOne" };
        expect(await _saveQuestionAnswer(addData)).toEqual(true);
    });

    test('Save answer - missing authedUser', async () => {
        let addData = { "qid":"loxhs1bqm25b708cmbf3g", "answer": "optionOne" };
        await expect(_saveQuestionAnswer(addData)).rejects.toEqual("Please provide authedUser, qid, and answer");
    });

    test('Save answer - missing qid', async () => {
        let addData = { "authedUser": "sarahedo", "answer": "optionOne" };
        await expect(_saveQuestionAnswer(addData)).rejects.toEqual("Please provide authedUser, qid, and answer");
    });

    test('Save answer - missing answer', async () => {
        let addData = { "authedUser": "sarahedo", "qid":"loxhs1bqm25b708cmbf3g" };
        await expect(_saveQuestionAnswer(addData)).rejects.toEqual("Please provide authedUser, qid, and answer");
    });
});